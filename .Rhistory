plot.title = element_text(size = 11, face = "bold"),
plot.caption = element_text(hjust = 0, vjust = -1))
box_label = "Outliers are Census Tracts 5800, 7406, 7803, \n7804, 8803, 9603, and 10700"
boxVC3 = boxVC2 + annotate("text", x = -0.1, y = 2600,
label = box_label,
size = 3) +
theme(axis.title.y = element_blank())
boxVC3
#outliersdf = crimedf[(crimedf$CENSUS_TRACT) %in% outliers & (crimedf$violent_crime == 1),]
outliersdf = crimedf[(crimedf$violent_crime == 1),]
CrimeType=table(outliersdf$CENSUS_TRACT, outliersdf$OFFENSE) %>%
prop.table(margin = 2) %>%
"*"(100) %>%
round(3)
df.T=as.data.frame(CrimeType)
names(df.T)=c('CensusTract','Offense','Percent')
head(df.T)
base  = ggplot(df.T, aes(x = CensusTract, y = Offense, fill = Percent))
heat1 = base + geom_tile()
heat2 = heat1 + scale_fill_gradient(low = "white", high = "black", name = "Share of Crime \nCommitted in Tract")
heat3 = heat2 + theme_classic()
heat4 = heat3 + theme(axis.text.x = element_text(angle = 0, vjust = 0.6),
legend.position="right",
legend.direction="vertical",
legend.key.width=unit(1, "cm"),
legend.key.height=unit(1, "cm"))
heattitle = "Amongst census tracts with the highest rates of violent crime,\nin which tracts do these crimes most often occur?"
heatsource = "Source: Washington, DC Metropolitan Police Department"
heat5 = heat4 + labs(title = heattitle,
y="Type of Violent Crime",
x="Census Tract",
caption= "Source: Washington, DC Metropolitan Police Department")
heat6 = heat5 + theme(plot.title = element_text(face="bold", size=11),
plot.subtitle = element_text(size = 14, hjust = 1),
plot.caption = element_text(hjust = 0, vjust = -1),
axis.title.y = element_blank(),
axis.title.x = element_text(size = 9, vjust = -1),
legend.title = element_text(size = 9))
heat6
outliersdf = crimedf[(crimedf$CENSUS_TRACT) %in% outliers & (crimedf$violent_crime == 1),]
CrimeType=table(outliersdf$CENSUS_TRACT, outliersdf$OFFENSE) %>%
prop.table(margin = 2) %>%
"*"(100) %>%
round(3)
df.T=as.data.frame(CrimeType)
names(df.T)=c('CensusTract','Offense','Percent')
head(df.T)
base  = ggplot(df.T, aes(x = CensusTract, y = Offense, fill = Percent))
heat1 = base + geom_tile()
heat2 = heat1 + scale_fill_gradient(low = "white", high = "black", name = "Share of Crime \nCommitted in Tract")
heat3 = heat2 + theme_classic()
heat4 = heat3 + theme(axis.text.x = element_text(angle = 0, vjust = 0.6),
legend.position="right",
legend.direction="vertical",
legend.key.width=unit(1, "cm"),
legend.key.height=unit(1, "cm"))
heattitle = "Amongst census tracts with the highest rates of violent crime,\nin which tracts do these crimes most often occur?"
heatsource = "Source: Washington, DC Metropolitan Police Department"
heat5 = heat4 + labs(title = heattitle,
y="Type of Violent Crime",
x="Census Tract",
caption= "Source: Washington, DC Metropolitan Police Department")
heat6 = heat5 + theme(plot.title = element_text(face="bold", size=11),
plot.subtitle = element_text(size = 14, hjust = 1),
plot.caption = element_text(hjust = 0, vjust = -1),
axis.title.y = element_blank(),
axis.title.x = element_text(size = 9, vjust = -1),
legend.title = element_text(size = 9))
heat6
zipDC = "https://github.com/qziegler/visual_analytics_final_project/raw/master/2017_DCShapeFiles/tl_2017_11_tract.zip"
temp=tempfile()
download.file(zipDC, temp)
unzip(temp)
zipWater = "https://github.com/qziegler/visual_analytics_final_project/raw/master/2017_DCShapeFiles/tl_2017_11001_areawater.zip"
temp=tempfile()
download.file(zipWater, temp)
unzip(temp)
(maps=list.files(pattern = 'shp'))
DCtractMap <- readOGR("tl_2017_11_tract.shp", stringsAsFactors = FALSE)
DCwaterMap <- readOGR("tl_2017_11001_areawater.shp", stringsAsFactors = FALSE)
names(DCtractMap)
DCtractMap$TRACTCE <- as.numeric(DCtractMap$TRACTCE)
tractchars <- merge(DCtractMap, census_violent, by.x = "TRACTCE", by.y = "CENSUS_TRACT", all.x = F, all.y = T)
tractchars$outlier <- ifelse(tractchars$CENSUS_TRACT %in% (outliers), 1, 0)
tractchars <- merge(DCtractMap, census_violent, by.x = "TRACTCE", by.y = "CENSUS_TRACT", all.x = F, all.y = T)
tractchars$outlier <- ifelse(tractchars$TRACTCE %in% (outliers), 1, 0)
base = tm_shape(DCtractMap) + tm_polygons(col = "grey30")
layer1 = base +  tm_shape(tractchars) +
tm_polygons("outlier", style="quantile",n=2,
title="Violent Crime Rate", # title of legend
palette="Reds")
layer2 = layer1 + tm_shape(DCwaterMap) + tm_polygons(col="steelblue")
fullMap = layer2 + tm_compass(position = c('left','TOP'),type = 'arrow') +
tm_scale_bar(position=c("RIGHT", "BOTTOM"),width = 0.2)
fullMap = fullMap +  tm_layout(main.title = "Washington, D.C. 2017: Violent Crime Rate by Census Tract",
main.title.position = 'left',
main.title.size = 1,
main.title.fontface = "bold",
legend.position = c('RIGHT','center'),
legend.text.size = 0.8,
legend.title.size = 0.8,
inner.margins=c(0.01,0.3,0.01,0.3))
fullMap
#tractchars <- merge(DCtractMap, census_violent, by.x = "TRACTCE", by.y = "CENSUS_TRACT", all.x = F, all.y = T)
tractoutliers <- DCtractMap[DCtractMap$TRACTCE %in% outliers,]
base = tm_shape(DCtractMap) + tm_polygons(col = "grey30")
layer1 = base +  tm_shape(tractoutliers) + tm_polygons(col = "red")
# tm_polygons("outlier", style="quantile",n=2,
#            title="Violent Crime Rate", # title of legend
#            palette="Reds")
layer2 = layer1 + tm_shape(DCwaterMap) + tm_polygons(col="steelblue")
fullMap = layer2 + tm_compass(position = c('left','TOP'),type = 'arrow') +
tm_scale_bar(position=c("RIGHT", "BOTTOM"),width = 0.2)
fullMap = fullMap +  tm_layout(main.title = "Washington, D.C. 2017: Violent Crime Rate by Census Tract",
main.title.position = 'left',
main.title.size = 1,
main.title.fontface = "bold",
legend.position = c('RIGHT','center'),
legend.text.size = 0.8,
legend.title.size = 0.8,
inner.margins=c(0.01,0.3,0.01,0.3))
fullMap
base = tm_shape(DCtractMap) + tm_polygons(col = "grey30")
layer1 = base +  tm_shape(tractoutliers) + tm_polygons(col = "red")
layer2 = layer1 + tm_shape(DCwaterMap) + tm_polygons(col="steelblue")
fullMap = layer2 + tm_compass(position = c('left','TOP'),type = 'arrow') +
tm_scale_bar(position=c("RIGHT", "BOTTOM"),width = 0.2)
maptitle = "Washington, D.C. 2017: Census Tracts with Violent Crime Rates > 2,000 per 100,000 Residents"
fullMap = fullMap +  tm_layout(main.title = maptitle,
main.title.position = 'left',
main.title.size = 1,
main.title.fontface = "bold",
legend.position = c('RIGHT','center'),
legend.text.size = 0.8,
legend.title.size = 0.8,
inner.margins=c(0.01,0.3,0.01,0.3))
fullMap
base = tm_shape(DCtractMap) + tm_polygons(col = "grey30")
layer1 = base +  tm_shape(tractoutliers) + tm_polygons(col = "red")
layer2 = layer1 + tm_shape(DCwaterMap) + tm_polygons(col="steelblue")
fullMap = layer2 + tm_compass(position = c('left','TOP'),type = 'arrow') +
tm_scale_bar(position=c("left", "BOTTOM"),width = 0.2)
maptitle = "Washington, D.C. 2017: Census Tracts with Violent Crime Rates > 2,000 per 100,000 Residents"
fullMap = fullMap +  tm_layout(main.title = maptitle,
main.title.position = 'left',
main.title.size = 1,
main.title.fontface = "bold",
inner.margins=c(0.01,0.3,0.01,0.3))
fullMap
base = tm_shape(DCtractMap) + tm_polygons(col = "grey30")
layer1 = base +  tm_shape(tractoutliers) + tm_polygons(col = "red")
layer2 = layer1 + tm_shape(DCwaterMap) + tm_polygons(col="steelblue")
fullMap = layer2 + tm_compass(position = c('left','TOP'),type = 'arrow') +
tm_scale_bar(position=c("left", "BOTTOM"),width = 0.2)
maptitle = "Washington, D.C. 2017: Census Tracts with Violent Crime Rates > 2,000 per \n100,000 Residents"
fullMap = fullMap +  tm_layout(main.title = maptitle,
main.title.position = 'left',
main.title.size = 1,
main.title.fontface = "bold",
inner.margins=c(0.01,0.3,0.01,0.3))
fullMap
base = tm_shape(DCtractMap) + tm_polygons(col = "grey30")
layer1 = base +  tm_shape(tractoutliers) + tm_polygons(col = "red")
layer2 = layer1 + tm_shape(DCwaterMap) + tm_polygons(col="steelblue")
fullMap = layer2 + tm_compass(position = c('left','TOP'),type = 'arrow') +
tm_scale_bar(position=c("left", "BOTTOM"),width = 0.2)
maptitle = "Washington, D.C. 2017: Census Tracts with Violent Crime Rates > 2,000 per \n100,000 Residents"
fullMap = fullMap +  tm_layout(main.title = maptitle,
main.title.position = 'left',
main.title.size = 1,
main.title.fontface = "bold",
inner.margins=c(0.01,0.3,0.01,0.0))
fullMap
base = tm_shape(DCtractMap) + tm_polygons(col = "grey30")
layer1 = base +  tm_shape(tractoutliers) + tm_polygons(col = "red")
layer2 = layer1 + tm_shape(DCwaterMap) + tm_polygons(col="steelblue")
fullMap = layer2 + tm_compass(position = c('left','TOP'),type = 'arrow') +
tm_scale_bar(position=c("left", "BOTTOM"),width = 0.2)
maptitle = "Washington, D.C. 2017: Census Tracts with Violent \nCrime Rates > 2,000 per 100,000 Residents"
fullMap = fullMap +  tm_layout(main.title = maptitle,
main.title.position = 'left',
main.title.size = 1,
main.title.fontface = "bold",
inner.margins=c(0.01,0.3,0.01,0.0))
fullMap
base = tm_shape(DCtractMap) + tm_polygons(col = "grey30")
layer1 = base +  tm_shape(tractoutliers) + tm_polygons(col = "red")
layer2 = layer1 + tm_shape(DCwaterMap) + tm_polygons(col="steelblue")
fullMap = layer2 + tm_compass(position = c('left','TOP'),type = 'arrow') +
tm_scale_bar(position=c("left", "BOTTOM"),width = 0.2)
maptitle = "Washington, D.C. 2017: Census Tracts with Violent \nCrime Rates > 2,000 per 100,000 Residents"
fullMap = fullMap +  tm_layout(main.title = maptitle,
main.title.position = 'left',
main.title.size = 1,
main.title.fontface = "bold",
inner.margins=c(0.01,0.3,0.01,0.01))
fullMap
base = tm_shape(DCtractMap) + tm_polygons(col = "grey30")
layer1 = base +  tm_shape(tractoutliers) + tm_polygons(col = "red")
layer2 = layer1 + tm_shape(DCwaterMap) + tm_polygons(col="steelblue")
fullMap = layer2 + tm_compass(position = c('left','TOP'),type = 'arrow') +
tm_scale_bar(position=c("left", "BOTTOM"),width = 0.2)
maptitle = "Washington, D.C. 2017: Census Tracts with Violent \nCrime Rates > 2,000 per 100,000 Residents"
fullMap = fullMap +  tm_layout(main.title = maptitle,
main.title.position = 'left',
main.title.size = 1,
main.title.fontface = "bold",
inner.margins=c(0.01,0.3,0.01,0.01))
fullMap
col_names <- c("Census.Tract",
"Total.Population",
"Median.Household.Income",
"Unemployment.Rate",
"Vacancy.Rate",
"Violent.Crime.Count",
"Violent.Crime.Rate")
corrdf <- census_violent
colnames(corrdf) <- col_names
corrp = ggcorr(corrdf[,-c(1,6)],
hjust = 0.9,
size=3,
layout.exp=1,
low = 'red',high = 'blue')
corrp2 = corrp + guides(fill = guide_legend("Correlation:"))
title = "Washington, DC: Census tract median household income and population is strongly \nand negatively correlated with the violent crime rate."
caption = "Source: Washington, DC Metropolitan Police Department, 2016 American Community Survey 5-Year Estimates"
corrp3 = corrp2 + labs(title = title,
caption = caption)
corrp4 = corrp3 + theme(plot.title = element_text(size = 11, face = "bold", hjust = 0),
plot.caption = element_text(hjust = 0),
legend.position = "right")
corrp4
set.seed(228715)
corrdf_comp <- corrdf[complete.cases(corrdf),]
result <- kmeans(corrdf_comp[,-c(1,6)], centers = 3)
corrdf_comp$Cluster <- result$cluster
tmpdf <- corrdf_comp[,-c(6,9)]
distanceAmong <- dist(tmpdf[,-1])
result <- cmdscale(distanceAmong, eig = TRUE, k = 2)
dim1 <- result$points[,1]
dim2 <- result$points[,2]
coordinates <- data.frame(dim1, dim2,
census_tract = corrdf_comp$Census.Tract,
cluster = corrdf_comp$Cluster,
vc_rate = corrdf_comp$Violent.Crime.Rate)
outliers <- c("5800","7406", "7803", "7804", "8803", "9603", "10700")
base = ggplot(coordinates, aes(x = dim1, y = dim2, color = factor(cluster))) +
scale_color_manual(values = c("deepskyblue3","grey30","darkorange3"),
name = "Census Tract Cluster")
clust1 = base + geom_point() + geom_text_repel(aes(label=ifelse(census_tract %in% outliers,
census_tract,"")),
size = 4, show.legend = FALSE)
title = "Washington, DC: Census tracts with exceptionally high violent crime rates are not that \ndifferent from other tracts based on income, employment, and unit vacancy"
caption = "Source: Washington, DC Metropolitan Police Department, 2016 American Community Survey 5-Year Estimates"
clust2 = clust1 + labs(title = title,
caption = caption)
clust3 = clust2 + theme(panel.background = element_rect(fill = "white", color = "grey50"),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(size = 11, face = "bold"),
legend.title = element_text(size = 9),
legend.position = "bottom",
plot.caption = element_text(hjust = 0))
clust3
regdf <- census_violent[complete.cases(census_violent),]
regdf <- apply(regdf, 2, function(x) ifelse(x==0,0.01,x))
regdf <- as.data.frame(regdf)
modelA <- lm(log(vcrate) ~ log(total_pop) + log(hh_med_income) + log(vacancy_rate),
data = regdf)
summary(modelA)
modelA_t <- tidy(modelA) %>% mutate(model = "No Employment Control")
modelB <- lm(log(vcrate) ~ log(total_pop) + log(hh_med_income) + log(unemp_rate) + log(vacancy_rate),
data = regdf)
summary(modelB)
modelB_t <- tidy(modelB) %>% mutate(model = "Employment Control")
allmodels <- rbind(modelB_t, modelA_t)
plot1 = dwplot(allmodels) +
geom_vline(xintercept = 0,
colour = "grey60",
linetype = 2) +
scale_colour_grey(start = .1, end = .5, name="Model") + theme_bw()
title = "Controlling for unemployment rate substantially reduces the magnitude \nof the negative effect of household income on the violent crime rate."
caption = "Source: Washington, DC Metropolitan Police Department, 2016 American Community Survey 5-Year Estimates"
plot2 = plot1 + labs(title = title,
x = "% Change in Violent Crime Rate",
y = "Census Tract Characteristic",
caption = caption)
plot3 = plot2 + scale_y_discrete(labels = c("Vacancy Rate",
"Unemployment Rate",
"Median Household Income",
"Total Population")) +
scale_x_continuous(breaks = c(-2,-1,0,1,2), limits = c(-2,2))
plot4 = plot3 + theme(panel.grid.major.y = element_blank(),
plot.title = element_text(size = 11, face = "bold", hjust = 0.5),
axis.title = element_text(size = 9),
plot.caption = element_text(hjust = 0.5),
legend.position = "bottom")
plot4
library(readstata13)
library(car)
library(lmtest)
library(ggplot2)
library(dplyr)
library(haven)
rm(list=ls())
vicdf <- read.dta13("/Users/qziegler/Desktop/SOC505/ProbSet4/dta/victimization&use.dta")
View(vicdf)
rm(list=ls())
vicdf <- read_dta("/Users/qziegler/Desktop/SOC505/ProbSet4/dta/victimization&use.dta")
View(vicdf)
vicdf$cj_never <- ifelse(vicdf$contact==1, 1, 0)
vicdj$cj_juvenile <- ifelse(vicdf$contact==2, 1, 0)
vicdf$cj_never <- ifelse(vicdf$contact==1, 1, 0)
vicdf$cj_juvenile <- ifelse(vicdf$contact==2, 1, 0)
vicdf$cj_adult <- ifelse(vicdf$contact==3, 1, 0)
vicdf$checker <- vicdf$cj_never + vicdf$cj_juvenile + vicdf$cj_adult
table(vicdf$checker, useNA = "always")
vicdf$cj_never <- ifelse(vicdf$contact==1, 1, 0)
vicdf$cj_juvenile <- ifelse(vicdf$contact==2, 1, 0)
vicdf$cj_adult <- ifelse(vicdf$contact==3, 1, 0)
vicdf$checker <- vicdf$cj_never + vicdf$cj_juvenile + vicdf$cj_adult
table(vicdf$checker, useNA = "always")
vicdf$checker <- NULL
modelA <- (glm(victim ~ agefirst + currentage + binge + cj_juvenile + cj_adult,
data = vicdf, family = binomal(link = "logit")))
modelA <- (glm(victim ~ agefirst + currentage + binge + cj_juvenile + cj_adult,
data = vicdf, family = binomial(link = "logit")))
summary(modelA)
exp(coef(modelA))
linearHypothesis(modelA, "agefirst == 0")
linearHypothesis(modelA, "agefirst = 0")
linearHypothesis(modelA, "binge = 0")
linearHypothesis(modelA, c("cj_juvenile = 0", "cj_juvenile = cj_adult"))
linearHypothesis(modelA, "agefirst = currentage")
summary(vicdf$agefirst)
pr_data <- data.frame(agefirst = rep(seq(0,21,1), each=10),
contact = c(0,1,2),
binge = 2,
currentage = 25)
pr_data <- data.frame(agefirst = rep(seq(0,21,1), each=21),
contact = c(0,1,2),
binge = 2,
currentage = 25)
# pr_data$predicted <- predict(modelC,
#                              newdata = pr_data,
#                              type = "response")
#
# ggplot(pr_data, aes(y=predicted, x=cpeers, group=as.factor(sex),
#                     col = as.factor(sex))) +
#       geom_line() + scale_y_continuous(breaks = c(0,0.25,0.50,0.75,1), limits = c(0,1))
View(pr_data)
pr_data <- data.frame(agefirst = rep(seq(0,21,1), each=3),
contact = c(0,1,2),
binge = 2,
currentage = 25)
# pr_data$predicted <- predict(modelC,
#                              newdata = pr_data,
#                              type = "response")
#
# ggplot(pr_data, aes(y=predicted, x=cpeers, group=as.factor(sex),
#                     col = as.factor(sex))) +
#       geom_line() + scale_y_continuous(breaks = c(0,0.25,0.50,0.75,1), limits = c(0,1))
View(pr_data)
pr_data <- data.frame(agefirst = rep(seq(0,21,1), each=3),
contact = c(0,1,2),
binge = 2,
currentage = 25)
pr_data$cj_never <- ifelse(pr_data$contact==1, 1, 0)
pr_data$cj_juvenile <- ifelse(pr_data$contact==2, 1, 0)
pr_data$cj_adult <- ifelse(pr_data$contact==3, 1, 0)
pr_data$predicted <- predict(modelA,
newdata = pr_data,
type = "response")
# ggplot(pr_data, aes(y=predicted, x=cpeers, group=as.factor(sex),
#                     col = as.factor(sex))) +
#       geom_line() + scale_y_continuous(breaks = c(0,0.25,0.50,0.75,1), limits = c(0,1))
View(pr_data)
pr_data <- data.frame(agefirst = rep(seq(0,21,1), each=3),
contact = c(1,2,3),
binge = 2,
currentage = 25)
pr_data$cj_never <- ifelse(pr_data$contact==1, 1, 0)
pr_data$cj_juvenile <- ifelse(pr_data$contact==2, 1, 0)
pr_data$cj_adult <- ifelse(pr_data$contact==3, 1, 0)
pr_data$predicted <- predict(modelA,
newdata = pr_data,
type = "response")
# ggplot(pr_data, aes(y=predicted, x=cpeers, group=as.factor(sex),
#                     col = as.factor(sex))) +
#       geom_line() + scale_y_continuous(breaks = c(0,0.25,0.50,0.75,1), limits = c(0,1))
pr_data <- data.frame(agefirst = rep(seq(0,21,1), each=3),
contact = c(1,2,3),
binge = 2,
currentage = 25)
pr_data$cj_never <- ifelse(pr_data$contact==1, 1, 0)
pr_data$cj_juvenile <- ifelse(pr_data$contact==2, 1, 0)
pr_data$cj_adult <- ifelse(pr_data$contact==3, 1, 0)
pr_data$predicted <- predict(modelA,
newdata = pr_data,
type = "response")
ggplot(pr_data, aes(y=predicted, x=agefirst, group=as.factor(contact),
col = as.factor(contact))) +
geom_line() + scale_y_continuous(breaks = c(0,0.25,0.50,0.75,1), limits = c(0,1))
pr_data <- data.frame(agefirst = rep(seq(0,30,1), each=3),
contact = c(1,2,3),
binge = 2,
currentage = 25)
pr_data$cj_never <- ifelse(pr_data$contact==1, 1, 0)
pr_data$cj_juvenile <- ifelse(pr_data$contact==2, 1, 0)
pr_data$cj_adult <- ifelse(pr_data$contact==3, 1, 0)
pr_data$predicted <- predict(modelA,
newdata = pr_data,
type = "response")
ggplot(pr_data, aes(y=predicted, x=agefirst, group=as.factor(contact),
col = as.factor(contact))) +
geom_line() + scale_y_continuous(breaks = c(0,0.25,0.50,0.75,1), limits = c(0,1))
table(vicdf$agefirst, vicdf$victim)
vicdf$anycontact <- ifelse(vicdf$contact > 1, 1, 0)
table(vicdf$contact, vicdf$anycontact, useNA = "always")
modelB <- (glm(victim ~ agefirst + currentage + binge + anycontact,
data = vicdf, family = binomial(link = "logit")))
summary(modelB)
exp(coef(modelB))
linearHypothesis(modelB, "anycontact = 0")
BIC(modelA, modelB)
modelC <- (glm(victim ~ agefirst + currentage + binge + anycontact,
data = vicdf, family = gaussian))
summary(modelC)
modelC <- (glm(victim ~ agefirst + currentage + binge + cj_juvenile + cj_adult,
data = vicdf, family = gaussian))
summary(modelC)
rm(list=ls())
disdf <- read_dta("/Users/qziegler/Desktop/SOC505/ProbSet4/dta/urbandisadvantage2019_all.dta")
View(disdf)
modelA <- (glm(n_amurder ~ n_mobility + n_poverty + n_ahouses + n_logpop,
data = disdf, family = gaussian))
summary(modelA)
sd(disdf$n_amurder)
sd(disdf$n_mobility)
sd(disdf$n_poverty)
sd(disdf$n_ahouses)
disdf$pred_murder <- predict(modelA)
disdf$residuals <- resid(modelA)
disdf$pred_murder <- predict(modelA)
disdf$residuals <- resid(modelA)
base = ggplot(disdf, aes(x=pred_murder, y=residuals))
plot = base + geom_point()
plot
disdf$pred_murder <- predict(modelA)
disdf$pred_murder2 <- fitted(modelA)
disdf$residuals <- resid(modelA)
base = ggplot(disdf, aes(x=pred_murder, y=residuals))
plot = base + geom_point()
plot
disdf$pred_murder <- predict(modelA)
disdf$pred_murder2 <- (distdf$pred_murder)^2
disdf$pred_murder <- predict(modelA)
disdf$pred_murder2 <- (disdf$pred_murder)^2
disdf$residuals <- resid(modelA)
base = ggplot(disdf, aes(x=pred_murder, y=residuals))
plot = base + geom_point()
plot
modelhet <- (glm(residuals ~ pred_murder + pred_murder2,
data = disdf, family = gaussian))
summary(modelhet)
disdf$pred_murder <- predict(modelA)
disdf$pred_murder2 <- (disdf$pred_murder)^2
disdf$residuals <- resid(modelA)
disdf$residuals2 <- (disdf$residuals)^2
base = ggplot(disdf, aes(x=pred_murder, y=residuals))
plot = base + geom_point()
plot
linearHypothesis(modelhet, c("pred_murder = 0", "pred_murder = pred_murder2"))
bptest(modelA)
modelhet <- (glm(residuals2 ~ pred_murder + pred_murder2,
data = disdf, family = gaussian))
summary(modelhet)
linearHypothesis(modelhet, c("pred_murder = 0", "pred_murder = pred_murder2"))
library(readstata13)
library(car)
library(lmtest)
library(ggplot2)
library(dplyr)
library(haven)
library(sjstats)
install.packages("sjstats")
library(readstata13)
library(car)
library(lmtest)
library(ggplot2)
library(dplyr)
library(haven)
library(sjstats)
robust(modelA)
Boot(glm(n_amurder ~ n_mobility + n_poverty + n_ahouses + n_logpop,
data = disdf, family = gaussian))
library(boot)
boot_glm <- function(d,indices) {
d <- d[indices,]
fit <- glm(n_amurder ~ n_mobility + n_poverty + n_ahouses + n_logpop,
data = d, family = gaussian)
return(coef(fit))
}
boot(data = disdf,
statistic = boot_glm,
R = 1000)
tmp <- as.data.frame(Boot(glm(n_amurder ~ n_mobility + n_poverty + n_ahouses + n_logpop,
data = disdf, family = gaussian)))
View(tmp)
Boot(glm(n_amurder ~ n_mobility + n_poverty + n_ahouses + n_logpop,
data = disdf, family = gaussian))
